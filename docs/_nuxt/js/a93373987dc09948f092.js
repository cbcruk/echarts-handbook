(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{405:function(e,n,t){"use strict";t.r(n),n.default="# 데이터의 시각적 매핑(Visual Map of Data)\n\n데이터 시각화는 데이터를 시각적 요소로 매핑하는 과정입니다. 이 과정은 시각적 코딩이라고도 할 수 있으며, 시각적 요소는 시각적 채널이라고도 할 수 있습니다.\n\nApache ECharts<sup>TM</sup>의 모든 차트 유형에는 이 내장된 매핑 과정이 있습니다. 예를 들어, 선형 차트는 데이터를 _선_으로 매핑하고, 막대 차트는 데이터를 _높이_로 매핑합니다. `graph`, `themeRiver`, `treemap`과 같은 더 복잡한 차트들은 고유한 내장 매핑을 가지고 있습니다.\n\n또한 ECharts는 일반적인 시각적 매핑을 위해 [visualMap 컴포넌트](${optionPath}visualMap)를 제공합니다. `visualMap` 컴포넌트에서 허용되는 시각적 요소는 다음과 같습니다:\n\n- `symbol`, `symbolSize`\n- `color`, `opacity`, `colorAlpha`,\n- `colorLightness`, `colorSaturation`, `colorHue`\n\n다음으로 `visualMap` 컴포넌트를 사용하는 방법을 소개하겠습니다.\n\n## Data and Dimension\n\nData are usually stored in [series.data](${optionPath}series.data) in ECharts. Depending on chart types, like list, tree, graph, and so on, the form of data may vary somehow. But they have one common feature, that they are a collection of data items. Every data item contains data value, and other information if needed. Every data value can be a single value (one dimension) or an array (multiple dimensions).\n\nFor example, [series.data](${optionPath}series.data) is the most common form, which is a `list`, a common array:\n\n```js\nseries: {\n  data: [\n    {\n      // every item here is a dataItem\n      value: 2323, // this is data value\n      itemStyle: {}\n    },\n    1212, // it can also be a value of dataItem, which is a more common case\n    2323, // every data value here is one dimension\n    4343,\n    3434\n  ];\n}\n```\n\n```js\nseries: {\n  data: [\n    {\n      // every item here is a dataItem\n      value: [3434, 129, 'San Marino'], // this is data value\n      itemStyle: {}\n    },\n    [1212, 5454, 'Vatican'], // it can also be a value of dataItem, which is a more common case\n    [2323, 3223, 'Nauru'], // every data value here is three dimension\n    [4343, 23, 'Tuvalu'] // If is scatter chart, usually map the first dimension to x axis,\n    // the second dimension to y axis,\n    // and the third dimension to symbolSize\n  ];\n}\n```\n\nUsually the first one or two dimensions are used for mapping. For example, map the first dimension to x axis, and the second dimension to y axis. If you want to represent more dimensions, `visualMap` is what you need. Most likely, [scatter charts](${optionPath}series-scatter) use radius to represent the third dimension.\n\n## The visualMap Component\n\nvisualMap component defines the mapping from _which dimension of data_ to _what visual elements_.\n\nThe following two types of visualMap components are supported, identified with [visualMap.type](${optionPath}visualMap.type).\n\nIts structure is defined as:\n\n```js\noption = {\n  visualMap: [\n    // can define multiple visualMap components at the same time\n    {\n      // the first visualMap component\n      type: 'continuous' // defined as continuous visualMap\n      // ...\n    },\n    {\n      // the second visualMap component\n      type: 'piecewise' // defined as discrete visualMap\n      // ...\n    }\n  ]\n  // ...\n};\n```\n\n## Continuous and Piecewise Visual Mapping Components\n\nThe visual mapping component of ECharts is divided into continuous ([visualMapContinuous](${optionPath}visualMap-continuous)) and piecewise ([visualMapPiecewise](${optionPath}visualMap-piecewise)).\n\nContinuous means that the data dimension for visual mapping is a continuous value, while piecewise means that the data is divided into multiple segments or discrete data.\n\n### Continuous Visual Mapping\n\nContinuous type visual mapping can determine the range of visual mapping by specifying the maximum and minimum values.\n\n```js\noption = {\n  visualMap: [\n    {\n      type: 'continuous',\n      min: 0,\n      max: 5000,\n      dimension: 3, // the fourth dimension of series.data (i.e. value[3]) is mapped\n      seriesIndex: 4, // The fourth series is mapped.\n      inRange: {\n        // The visual configuration in the selected range\n        color: ['blue', '#121122', 'red'], // A list of colors that defines the graph color mapping\n        // the minimum value of the data is mapped to 'blue', and\n        // the maximum value is mapped to 'red', // the maximum value is mapped to 'red', // the maximum value is mapped to 'red'.\n        // The rest is automatically calculated linearly.\n        symbolSize: [30, 100] // Defines the mapping range for the graphic size.\n        // The minimum value of the data is mapped to 30, // and the maximum value is mapped to 100.\n        // The maximum value is mapped to 100.\n        // The rest is calculated linearly automatically.\n      },\n      outOfRange: {\n        // Check the out of range visual configuration\n        symbolSize: [30, 100]\n      }\n    }\n    // ...\n  ]\n};\n```\n\nwhere [visualMap.inRange](${optionPath}visualMap.inRange) indicates the style used for data within the data mapping range; while [visualMap.outOfRange](${optionPath}visualMap.outOfRange) specifies the style for data outside the mapping range.\n\n[visualMap.dimension](~visualMap.dimension) specifies which dimension of the data will be visually mapped.\n\n### Piecewise Visual Mapping\n\nThe piecewise visual mapping component has three modes.\n\n- Continuous data average segmentation: based on [visualMap-piecewise.splitNumber](${optionPath}visualMap-piecewise.splitNumber) to automatically split the data into pieces equally.\n- Continuous data custom segmentation: define the range of each piece based on [visualMap-piecewise.pieces](${optionPath}visualMap-piecewise.pieces).\n- Discrete data (categorical data): categories are defined in [visualMap-piecewise.categories](${optionPath}visualMap-piecewise.categories).\n\nTo use segmented visual map, you need to set `type` to `'piecewise'` and choose one of the above three configuration items.\n"}}]);