(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{395:function(n,t,e){"use strict";e.r(t),t.default='# 차트 컨테이너와 크기\n\n[시작하기](${lang}/get-started)에서 ECharts를 초기화하는 API인 [`echarts.init`](${mainSitePath}/api.html#echarts.init)에 대해 소개했습니다. [API 문서](${mainSitePath}/api.html#echarts.init)에서 각 매개변수의 구체적인 의미를 소개했습니다. 다음 내용을 읽기 전에 해당 문서를 읽고 이해하시기 바랍니다.\n\n여러 일반적인 사용 시나리오를 참조하여, 다음은 차트를 초기화하고 크기를 변경하는 예제입니다.\n\n## 초기화\n\n### HTML에서 부모 컨테이너 정의\n\n일반적으로 `<div>` 노드를 정의하고 CSS를 사용하여 너비와 높이를 변경해야 합니다. 초기화할 때 차트를 해당 노드에 가져옵니다. `opts.width` 또는 `opts.height`를 선언하지 않으면 차트의 크기는 기본적으로 노드의 크기로 설정됩니다.\n\n```html\n<div id="main" style="width: 600px;height:400px;"></div>\n<script type="text/javascript">\n  var myChart = echarts.init(document.getElementById(\'main\'));\n<\/script>\n```\n\n주의할 점은 `echarts.init`을 호출하기 전에 컨테이너가 이미 너비와 높이를 가지고 있는지 확인해야 한다는 것입니다.\n\n### 차트 크기 지정\n\n컨테이너의 높이와 너비가 없거나 차트 크기를 컨테이너와 다르게 하고 싶다면, 처음에 크기를 초기화할 수 있습니다.\n\n```html\n<div id="main"></div>\n<script type="text/javascript">\n  var myChart = echarts.init(document.getElementById(\'main\'), null, {\n    width: 600,\n    height: 400\n  });\n<\/script>\n```\n\n## 컨테이너 크기의 반응형 처리\n\n### 컨테이너 크기 변화에 따른 차트 크기 변경\n\n경우에 따라 컨테이너 크기가 변경될 때 차트 크기도 그에 따라 변경하고 싶을 수 있습니다.\n\n예를 들어, 컨테이너의 높이가 400px이고 너비가 사이트 너비의 100%라고 가정합니다. 사이트 너비를 변경하면서 차트 너비를 그 100%로 안정적으로 유지하려면 다음 방법을 시도해보세요.\n\n브라우저 크기가 조정되는 이벤트를 포착하기 위해 사이트의 `resize`를 수신할 수 있습니다. 그런 다음 [`echartsInstance.resize`](${mainSitePath}api.html#echartsInstance.resize)를 사용하여 차트 크기를 조정합니다.\n\n```html\n<style>\n  #main,\n  html,\n  body {\n    width: 100%;\n  }\n  #main {\n    height: 400px;\n  }\n</style>\n<div id="main"></div>\n<script type="text/javascript">\n  var myChart = echarts.init(document.getElementById(\'main\'));\n  window.addEventListener(\'resize\', function() {\n    myChart.resize();\n  });\n<\/script>\n```\n\n> 팁: 때때로 JS/CSS로 컨테이너 크기를 조정할 수 있지만, 이는 페이지 크기를 변경하지 않으므로 `resize` 이벤트가 트리거되지 않습니다. 이 시나리오를 다루기 위해 [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API를 시도해볼 수 있습니다.\n\n### 특정 차트 크기 설정\n\n매개변수 없이 `resize()`를 호출하는 것 외에도, 높이와 너비를 지정하여 컨테이너 크기와 다른 차트 크기를 구현할 수 있습니다.\n\n```js\nmyChart.resize({\n  width: 800,\n  height: 400\n});\n```\n\n> 팁: 문서를 읽을 때 API가 어떻게 정의되어 있는지 주의하세요. `resize()` API는 때때로 존재하지 않는 `myCharts.resize(800, 400)` 형태로 잘못 인식되기도 합니다.\n\n### 컨테이너 노드의 제거 및 재구축\n\n여러 북마크 페이지가 있고 각 페이지에 일부 차트가 포함되어 있다고 가정해봅시다. 이 경우 한 페이지를 선택하면 다른 페이지의 내용이 DOM에서 제거됩니다. 사용자는 이러한 페이지를 다시 선택한 후에 차트를 찾을 수 없을 것입니다.\n\n본질적으로 이는 차트의 컨테이너 노드가 제거되었기 때문입니다. 나중에 노드가 다시 추가되더라도 그래프가 위치한 노드는 더 이상 존재하지 않습니다.\n\n올바른 방법은 컨테이너가 제거된 후 [`echartsInstance.dispose`](${mainSitePath}api.html#echartsInstance.dispose)를 호출하여 인스턴스를 제거하고, 컨테이너가 다시 추가된 후 [echarts.init](${mainSitePath}/api.html#echarts.init)을 호출하여 초기화하는 것입니다.\n\n> 팁: 메모리 누수를 방지하기 위해 노드를 제거할 때 [`echartsInstance.dispose`](${mainSitePath}api.html#echartsInstance.dispose)를 호출하여 리소스를 해제하세요.\n'}}]);