(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{424:function(n,t,e){"use strict";e.r(t),t.default="# 비동기 데이터 로드 및 동적 업데이트\n\n## 비동기 로드\n\n[시작 가이드 예제](${lang}/get-started)의 데이터는 `setOption`을 사용하여 직접 업데이트됩니다. 하지만 많은 경우 데이터는 비동기 로드로 자주 채워져야 합니다. `ECharts`는 비동기 로드를 간단한 방닝으로 구현할 수 있습니다. jQuery와 같은 함수를 통해 데이터를 비동기로 가져오고 차트가 초기화된 후 `setOption`을 사용하여 데이터와 설정을 채울 수 있습니다.\n\n```js\nvar myChart = echarts.init(document.getElementById('main'));\n\n$.get('data.json').done(function(data) {\n  // Structure of data:\n  // {\n  //     categories: [\"Shirt\",\"Wool sweater\",\"Chiffon shirt\",\"Pants\",\"High-heeled shoes\",\"socks\"],\n  //     values: [5, 20, 36, 10, 10, 20]\n  // }\n  myChart.setOption({\n    title: {\n      text: '비동기 로드 예제'\n    },\n    tooltip: {},\n    legend: {},\n    xAxis: {\n      data: data.categories\n    },\n    yAxis: {},\n    series: [\n      {\n        name: '판매',\n        type: 'bar',\n        data: data.values\n      }\n    ]\n  });\n});\n```\n\nOr display empty axes with all styles defined before fill in the data:\n\n```js\nvar myChart = echarts.init(document.getElementById('main'));\n// Show title, legends and empty axes\nmyChart.setOption({\n  title: {\n    text: '비동기 로드 예제'\n  },\n  tooltip: {},\n  legend: {\n    data: ['Sales']\n  },\n  xAxis: {\n    data: []\n  },\n  yAxis: {},\n  series: [\n    {\n      name: 'Sales',\n      type: 'bar',\n      data: []\n    }\n  ]\n});\n\n// Asynchronous Data Loading\n$.get('data.json').done(function(data) {\n  // Fill in the data\n  myChart.setOption({\n    xAxis: {\n      data: data.categories\n    },\n    series: [\n      {\n        // Find series by name\n        name: '판매',\n        data: data.data\n      }\n    ]\n  });\n});\n```\n\nFor example:\n\n<md-example src=\"doc-example/tutorial-async\"></md-example>\n\nYou need to use `name` to \"navigate\" ECharts when updating data. In the previous example, the chart can update normally depending on the order of series, but we recommend you to add the `name` data while updating data.\n\n## loading Animation\n\nWhen it takes a long time to load the data, the user is facing the empty chart with only axes will wonder if there is a bug.\n\nECharts have a simple loading animation by default. You can call [showLoading](${mainSitePath}/api.html#echartsInstance.showLoading) to display. When the data loading was completed, call [hideLoading](${mainSitePath}/api.html#echartsInstance.hideLoading) to hide the animation.\n\n```js\nmyChart.showLoading();\n$.get('data.json').done(function (data) {\n    myChart.hideLoading();\n    myChart.setOption(...);\n});\n```\n\nHere is the effect:\n\n<md-example src=\"doc-example/tutorial-loading\"></md-example>\n\n## 동적 업데이트\n\nECharts는 데이터에 의해 구동되며, 데이터의 변화는 차트 표시의 변화를 이끌어냅니다. 따라서 동적 업데이트를 구현하는 것은 놀라울 정도로 간단합니다.\n\n모든 데이터의 업데이트는 [setOption](${mainSitePath}/api.html#echartsInstance.setOption)으로 구현됩니다. 주기적으로 데이터를 가져오기만 하면 됩니다. ECharts는 두 그룹의 데이터 간의 차이를 찾아 적절한 방닝으로 애니메이션을 선택합니다.\n\n다음 예제를 확인하세요.\n\n<md-example src=\"doc-example/tutorial-dynamic-data\"></md-example>\n"}}]);