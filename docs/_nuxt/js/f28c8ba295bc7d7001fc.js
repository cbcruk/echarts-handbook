(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{421:function(n,e,t){"use strict";t.r(e),e.default="# 기본 산점도\n\n자주 사용되는 차트 유형인 산점도는 여러 \"점\"으로 구성됩니다. 이 점들은 때때로 좌표계(직교 좌표계, 지리 좌표계 등)에서 값의 위치를 나타내고, 때때로 항목의 크기와 색상을 값에 매핑하여 고차원 데이터를 표현할 수 있습니다.\n\n## 간단한 예제\n\n다음 예제는 x축을 카테고리로, y축을 값으로 하는 기본 산점도 구성입니다:\n\n```js live\noption = {\n  xAxis: {\n    data: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n  },\n  yAxis: {},\n  series: [\n    {\n      type: 'scatter',\n      data: [220, 182, 191, 234, 290, 330, 310]\n    }\n  ]\n};\n```\n\n## 직교 좌표계에서의 산점도\n\n이전 경우에서 산점도의 x축은 불연속 카테고리 축이고 y축은 연속 값 축입니다. 하지만 산점도의 일반적인 시나리오는 2개의 연속 값 축을 갖는 것입니다(직교 좌표계라고도 함). 시리즈 타입은 x축과 y축 값 모두가 `xAxis`와 `yAxis`가 아닌 `data`에 포함된다는 점에서 다릅니다.\n\n```js live\noption = {\n  xAxis: {},\n  yAxis: {},\n  series: [\n    {\n      type: 'scatter',\n      data: [\n        [10, 5],\n        [0, 8],\n        [6, 10],\n        [2, 12],\n        [8, 9]\n      ]\n    }\n  ]\n};\n```\n\n## 사용자 정의 산점도\n\n### 심볼 스타일\n\n심볼은 산점도에서 항목의 모양을 의미합니다. 사용 가능한 설정 타입이 세 가지 있습니다. 첫 번째는 ECharts 내장 모양, 두 번째는 이미지, 마지막은 SVG 경로입니다.\n\nECharts의 내장 모양에는 `'circle'`, `'rect'`(사각형), `'roundRect'`(둥근 사각형), `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`가 포함됩니다. 내장 모양을 사용하려면 `symbol`을 해당 문자열로 설정해야 합니다.\n\n모양을 임의의 이미지로 정의하려면, 경로를 따라 `'image'`를 사용해보세요. 예: `'image://http://example.com/xxx.png'` 또는 `'image://./xxx.png'`.\n\nECharts `symbol`은 SVG 벡터 그래픽도 지원합니다. `symbol`을 `'path://'`로 시작하는 SVG 파일 경로로 정의하여 벡터 그래픽을 찾을 수 있습니다. 벡터 그래픽의 장점은 작은 크기와 들쭉날쭉하거나 흐맼이 없다는 것입니다.\n\nSVG 경로를 찾는 방법: `SVG` 경로를 엽니다. `<path d=\"M… L…\"></path>`와 같은 경로를 찾습니다. `'path://'` 뒤에 `d`의 값을 추가합니다. 하트의 벡터 모양으로 항목을 정의하는 방법을 살펴보겠습니다.\n\n먼저 하트의 `SVG` 파일이 필요합니다. 벡터 편집 소프트웨어로 그리거나 인터넷에서 다운로드할 수 있습니다. 다음이 내용입니다:\n\n```xml\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 51.997 51.997\" style=\"enable-background:new 0 0 51.997 51.997;\" xml:space=\"preserve\">\n    <path d=\"M51.911,16.242C51.152,7.888,45.239,1.827,37.839,1.827c-4.93,0-9.444,2.653-11.984,6.905 c-2.517-4.307-6.846-6.906-11.697-6.906c-7.399,0-13.313,6.061-14.071,14.415c-0.06,0.369-0.306,2.311,0.442,5.478 c1.078,4.568,3.568,8.723,7.199,12.013l18.115,16.439l18.426-16.438c3.631-3.291,6.121-7.445,7.199-12.014 C52.216,18.553,51.97,16.611,51.911,16.242z\"/>\n</svg>\n```\n\nECharts에서 설정 `symbol`을 d의 경로로 정의합니다:\n\n```js live\noption = {\n  xAxis: {\n    data: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n  },\n  yAxis: {},\n  series: [\n    {\n      type: 'scatter',\n      data: [220, 182, 191, 234, 290, 330, 310],\n      symbolSize: 20,\n      symbol:\n        'path://M51.911,16.242C51.152,7.888,45.239,1.827,37.839,1.827c-4.93,0-9.444,2.653-11.984,6.905 c-2.517-4.307-6.846-6.906-11.697-6.906c-7.399,0-13.313,6.061-14.071,14.415c-0.06,0.369-0.306,2.311,0.442,5.478 c1.078,4.568,3.568,8.723,7.199,12.013l18.115,16.439l18.426-16.438c3.631-3.291,6.121-7.445,7.199-12.014 C52.216,18.553,51.97,16.611,51.911,16.242z'\n    }\n  ]\n};\n```\n\n이렇게 해서 항목의 하트 벡터를 가지게 됩니다.\n\n### 심볼 크기\n\n심볼의 크기는 [`series.symbolSize`](${optionPath}series-scatter.symbolSize)로 정의됩니다. 항목 크기의 픽셀 값이거나, 너비와 높이를 정의하는 두 숫자를 포함하는 배열일 수 있습니다.\n\n또한 콜백 함수로도 정의할 수 있습니다. 다음은 형식의 예입니다:\n\n```ts\n(value: Array | number, params: Object) => number | Array;\n```\n\n첫 번째 인수는 데이터 값이고, 두 번째 인수는 데이터 항목의 다른 인수들을 포함합니다. 다음 예에서는 항목의 크기를 데이터 값에 비례하도록 정의합니다.\n\n```js live\noption = {\n  xAxis: {\n    data: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n  },\n  yAxis: {},\n  series: [\n    {\n      type: 'scatter',\n      data: [220, 182, 191, 234, 290, 330, 310],\n      symbolSize: function(value) {\n        return value / 10;\n      }\n    }\n  ]\n};\n```\n"}}]);